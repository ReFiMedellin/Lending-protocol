type Debt @entity(immutable: true) {
  id: Bytes!
  debtor: Bytes! # address
  amount: BigInt! # uint256
  interests: BigInt! # uint256
  token: Bytes! # address
  decimals: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nonce: BigInt!# uint256
}

type Funded @entity(immutable: true) {
  id: Bytes!
  funder: Bytes! # address
  amount: BigInt! # uint256
  token: Bytes! # address
  decimals: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LendRepaid @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  amount: BigInt! # uint256
  token: Bytes! # address
  decimals: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nonce: BigInt! # uint256
}

type Lending @entity(immutable: false) {
  id: String!
  lender: Bytes! # address
  amount: BigInt! # uint256
  token: Bytes! # address
  decimals: Int! # uint8
  repaid: Boolean!
  currentAmount: BigInt!
  interests: BigInt!
  lastDebt:BigInt!
  paymentDue:BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAdded @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserQuotaIncreaseRequest @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  recipent: Bytes! # address
  amount: BigInt! # uint256
  signers: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserQuotaChanged @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  recipent: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserQuotaSigned @entity(immutable: true) {
  id: Bytes!
  signer: Bytes! # address
  recipent: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  withdrawer: Bytes! # address
  amount: BigInt! # uint256
  interests: BigInt! # uint256
  token: Bytes! # address
  decimals: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Token @entity {
  id: ID!
  tokenAddress: Bytes!
  symbol: String!
  name: String!
  addedAtTimestamp: BigInt
}

type User @entity{
  id: ID!
  quota: BigInt!
  quotaRequests: [UserQuotaRequest!]! @derivedFrom(field: "user")
}



type UserQuotaRequest @entity {
  id: ID!
  user: User! 
  amount: BigInt!
  successfulSigns: Int!
  signers: [String!]!
  signedBy: [String!]!
  complete: Boolean!
}